Index: Pchome/screen.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\r\nimport time\r\nimport re\r\nfrom os import listdir\r\nfrom os.path import isfile, join\r\n\r\nfrom bs4 import BeautifulSoup as bs\r\n\r\nfrom pchome_use import get_all_next, get_page_source, stopWord_split, to_json\r\n\r\nset_path = 'bin/data/'\r\n\r\n\r\ndef Screen_go():\r\n    def paser(url, factory):\r\n        name_ = []\r\n        price_ = []\r\n        factory_ =[]\r\n        size_ = []\r\n        html = get_page_source(url)\r\n        soup = bs(html, 'html.parser')\r\n\r\n        goal_html = ['#Block1Container > * > .mL > .prod_info',# 大區塊\r\n                     '#Block1Container > * > * > * > .mMV > .prod_info',# 大區塊旁\r\n                     '#ProdGridContainer > dd'# 小區塊\r\n                     ]\r\n\r\n        for html_patten in goal_html:\r\n            for i in soup.select(html_patten):\r\n                name = i.select('h5 > a')[0].text\r\n                price = i.select('.price_box > * > .price > .value')[0].text\r\n\r\n                name_patten = \"..[型|吋]\"\r\n                re_size = re.search(name_patten, str(name))\r\n                if re_size is not None:\r\n                    size = name[re_size.span()[0]:re_size.span()[1]]\r\n                else:\r\n                    size = \"\"\r\n\r\n                name_.append(name)\r\n                price_.append(int(price))\r\n                factory_.append(factory)\r\n                size_.append(size)\r\n\r\n        df = pd.DataFrame({\r\n            \"platform\": \"pchome\",\r\n            \"name\": name_,\r\n            \"factory\": factory_,\r\n            \"size\": size_,\r\n            \"price\": price_\r\n        })\r\n        return df\r\n\r\n    urls = {\r\n        \"acer\": 'https://24h.pchome.com.tw/store/DSABEL',\r\n        \"asus\": 'https://24h.pchome.com.tw/store/DSAB03',\r\n        \"view\": 'https://24h.pchome.com.tw/store/DSABEW',\r\n        \"AOC\": 'https://24h.pchome.com.tw/store/DSABGK'\r\n    }\r\n\r\n    pds = pd.DataFrame()\r\n    for i in urls:\r\n        url = urls[i]\r\n        next_page = get_all_next(url)\r\n        for i2 in next_page:\r\n            pdo = paser(url=i2, factory=i)\r\n            pds = pd.concat([pdo, pds], ignore_index=True)\r\n\r\n    pds['name'] = pds['name'].apply(stopWord_split)\r\n    pds = pds.sort_values(by=['price'])\r\n    pds = pds.drop_duplicates(subset=['name', 'price'], keep=False)\r\n\r\n    now = time.strftime(\"%y%m%d%H%M%S\", time.localtime())\r\n    to_json(pds, set_path + '{}Screen.json'.format(now))\r\n\r\n\r\ndef compare_trend2():\r\n    files = [f for f in listdir(set_path) if isfile(join(set_path, f))]\r\n    data2 = sorted(files, reverse=True)[:2]\r\n    print(data2)\r\n    new = pd.read_json(set_path + data2[0])\r\n    prev = pd.read_json(set_path + data2[1])\r\n    # print(new)\r\n    # print(prev)\r\n    group = pd.merge(left=new, right=prev, how='left', on='name')\r\n    group = group.rename({\"price_x\": \"new\", \"price_y\": \"price\"}, axis=1)\r\n    group = group.fillna(0)\r\n\r\n    group['new'] = group['new'].astype(int)\r\n    group['price'] = group['price'].astype(int)\r\n\r\n    group['trend'] = group.apply(lambda x: \"down\" if x['new'] < x['price'] else \"\", axis=1)\r\n    print(group)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    # Screen_go()\r\n    compare_trend2()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Pchome/screen.py	(revision 803dd48bb93d6762dadb8d421be3cdcd44aea032)
+++ Pchome/screen.py	(date 1588007655679)
@@ -94,5 +94,5 @@
 
 
 if __name__ == "__main__":
-    # Screen_go()
-    compare_trend2()
+    Screen_go()
+    # compare_trend2()
